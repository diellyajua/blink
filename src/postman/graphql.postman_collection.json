{
	"info": {
		"_postman_id": "4e3fee88-7267-44e1-a316-b81e90b0bd2b",
		"name": "graphql_simple_workflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "active",
			"item": [
				{
					"name": "notoken",
					"item": [
						{
							"name": "queries",
							"item": [
								{
									"name": "prices",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query prices {\n    prices {\n        id\n        o\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "buildParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6854f5c-2da7-4a22-9830-73a454397817",
												"exec": [
													"var moment = require('moment')",
													"",
													"pm.test(\"validate build parameters are set\", function () {",
													"    if (pm.environment.name != \"devnet\") {",
													"        const jsonData = pm.response.json();",
													"        const {commitHash, buildTime} = jsonData.data.buildParameters",
													"        pm.expect(commitHash.length).to.eql(40);",
													"        pm.expect(buildTime.substring(0,4)).to.eql(\"2020\")",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query buildParameters {\n    buildParameters {\n        commitHash\n        buildTime\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "nodeStats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "763d778e-9608-459d-90f7-fec1d40bbbac",
												"exec": [
													"pm.test(\"validate build parameters are set\", function () {",
													"    if (pm.environment.name != \"devnet\") {",
													"        const jsonData = pm.response.json();",
													"        const {peersCount, channelsCount} = jsonData.data.nodeStats",
													"        pm.expect(peersCount).to.be.above(1);",
													"        pm.expect(channelsCount).to.be.above(2);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query nodeStats {\n    nodeStats {\n        peersCount\n        channelsCount\n    }\n}",
												"variables": "{\n    \"uid\": \"5f5d9945815f69ab78d87348\",\n    \"value\": 2000\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "earnList",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query earnList {\n    earnList {\n        id\n        value\n        completed\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "mutations",
							"item": [
								{
									"name": "requestPhoneCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aced0500-81fb-4e10-884a-05decf972a74",
												"exec": [
													"pm.test(\"requesting a code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.requestPhoneCode.success).to.eql(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation requestPhoneCode ($phone: String) {\n    requestPhoneCode (phone: $phone) {\n        success\n    }\n}",
												"variables": "{\n  \"phone\": \"{{phone}}\"\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "login (phone+code)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9fc19ca-aa5d-489c-945d-40a95652d96c",
												"exec": [
													"pm.test(\"requesting a token\", function () {",
													"    const jsonData = pm.response.json();",
													"    const token = jsonData.data.login.token",
													"    // token should have two dot \".\"",
													"    const parts = token.split(\".\")",
													"    pm.expect(parts.length).to.eql(3);",
													"    pm.environment.set(\"token\", token)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation login ($phone: String, $code: Int) {\n    login (phone: $phone, code: $code) {\n        token\n    }\n}",
												"variables": "{\n  \"phone\": \"{{phone}}\",\n  \"code\": {{code}}\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "login (phone+code+currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8588c414-cb2d-484b-86ca-458ed51845ad",
												"exec": [
													"pm.test(\"requesting a token\", function () {",
													"    const jsonData = pm.response.json();",
													"    const token = jsonData.data.login.token",
													"    // token should have two dot \".\"",
													"    const parts = token.split(\".\")",
													"    pm.expect(parts.length).to.eql(3);",
													"    pm.environment.set(\"token\", token)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation login ($phone: String, $code: Int, $currency: String) {\n    login (phone: $phone, code: $code, currency: $currency) {\n        token\n    }\n}",
												"variables": "{\n  \"phone\": \"{{phone}}\",\n  \"code\": {{code}},\n  \"currency\": \"{{currency}}\"\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "token",
					"item": [
						{
							"name": "queries",
							"item": [
								{
									"name": "wallet",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query wallet {\n    wallet {\n        id\n        currency\n        balance\n        transactions {\n            id\n            amount\n            description\n            created_at\n            hash\n            type\n            usd\n            fee\n            feeUsd\n        }\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "earnList",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query earnList {\n    earnList {\n        id\n        value\n        completed\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "me",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query me {\n    me {\n        id\n        name\n        level\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastOnChain",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query lastOnChain {\n    getLastOnChainAddress {\n        id\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "mutations",
							"item": [
								{
									"name": "earnCompleted (empty)",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation earnCompleted ($ids: [ID]) {\n    earnCompleted (ids: $ids) {\n        id\n        value\n        completed\n    }\n}",
												"variables": "{\n  \"ids\": []\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "earnCompleted",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation earnCompleted ($ids: [ID]) {\n    earnCompleted (ids: $ids) {\n        id\n        value\n        completed\n    }\n}",
												"variables": "{\n  \"ids\": [\n    \"whatIsBitcoin\",\n    \"sat\",\n    \"whereBitcoinExist\"\n  ]\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "onchain.getNewAddress",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation onchain {\n    onchain {\n        getNewAddress\n    }\n}",
												"variables": "{}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "onchain.getFee",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation onchain($address: String!) {\n    onchain {\n        getFees(address: $address)\n    }\n}",
												"variables": "{\n    \"address\": \"2NAJJxF7Vi9wgxHpaYAVjhBRspRfUcyDy1Z\"\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "addInvoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa2789b2-8811-4e59-b326-c88e692d8168",
												"exec": [
													"pm.test(\"add invoice\", function () {",
													"    const jsonData = pm.response.json();",
													"    const invoice = jsonData.data.invoice.addInvoice",
													"    pm.expect(invoice.substring(0,2)).to.eql(\"ln\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation invoice ($value: Int, $memo: String) {\n    invoice {\n        addInvoice (value: $value, memo: $memo)\n    }\n}",
												"variables": "{\n  \"value\": 1000,\n  \"memo\": \"memo Invoice GQL\"\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "addInvoiceZeroAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59a2eac8-1ce1-4c65-aeed-909e6fb275a5",
												"exec": [
													"pm.test(\"add invoice\", function () {",
													"    const jsonData = pm.response.json();",
													"    const invoice = jsonData.data.invoice.addInvoice",
													"    pm.expect(invoice.substring(0,2)).to.eql(\"ln\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation invoice {\n    invoice {\n        addInvoice\n    }\n}",
												"variables": "{\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "addDeviceToken",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addDeviceToken($deviceToken: String) {\n    addDeviceToken(deviceToken: $deviceToken) {\n        success\n    }\n}",
												"variables": "{\n    \"deviceToken\": \"test\"\n}"
											},
											"options": {
												"graphql": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
											"protocol": "{{protocol}}",
											"host": [
												"{{domain}}"
											],
											"port": "{{port}}",
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d48e29c-60ad-43cf-af0b-acfd16c9bf22",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "daba0420-4cc7-47e6-9fc5-caa8eadd157f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be58a9be-82f9-46c4-be28-648ca5fc7b8d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4249ed6e-da04-469f-ab0a-a702c7f3ad69",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7cefffb5-2eb6-4259-ae99-23c371b80a60",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fac2cd73-5f19-46b1-a72c-2d0d2a06c738",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"has no error\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors).to.be.undefined",
							"})"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "todo",
			"item": [
				{
					"name": "deleteUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUser {\n    deleteUser\n}",
								"variables": "{}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUser ($user: InputUser) {\n    updateUser (user: $user) {\n        id\n        name\n        level\n    }\n}",
								"variables": "{\n  \"user\": {\n    \"id\": 0,\n    \"level\": 0,\n    \"deviceToken\": \"\"\n  }\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "payInvoice",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation payInvoice($invoice: String!, $amount: Int, $memo: String) {\n    invoice {\n        payInvoice(invoice: $invoice, amount: $amount, memo: $memo)\n    }\n}",
								"variables": "{\n  \"invoice\": \"lnbcrt1p0hxuhnpp5l0emkjdd95vm9qs9268emss0xsu5tq2tu9cwcrqr0qj4h2g0eqmsdqqcqzpgsp5j82t7ajhzednhlkhj7hkgdd37eqfngvda36m9hy90809sk8ug5fq9qy9qsqt42wqpmyp3jz94a77d325m382gewnjhzse5ncc6cjkdh5hjw77mxyg3cyngj429ss2g0hl9x2l4kzn3d83pnjrsxkce2yvmdnanh74sqpmcahj\",\n  \"amount\": 50,\n  \"memo\": \"this is my memo\"\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePendingInvoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4a8dd8-2348-47ab-a02e-e30099588abb",
								"exec": [
									"// todo // being able to have https://blog.postman.com/writing-a-behaviour-driven-api-testing-environment-within-postman/ in the library",
									"// need to compress it and load it with eval()",
									"",
									"// TODO: set the parameter of the invoice to a real hash"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoice ($hash: String) {\n    invoice {\n        updatePendingInvoice (hash: $hash)\n    }\n}",
								"variables": "{\n  \"hash\": \"9370880d24e0a0dfc4304ce3009f58e06fba301973e765346b06441ae3236c90\"\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "openChannel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation openChannel ($local_tokens: Int, $public_key: String, $socket: String) {\n    openChannel (local_tokens: $local_tokens, public_key: $public_key, socket: $socket) {\n        tx\n    }\n}",
								"variables": "{\n  \"local_tokens\": 10000000,\n  \"public_key\": \"03864ef025fde8fb587d989186ce6a4a186895ee44a926bfc370e2c366597a3f8f\",\n  \"socket\": \"34.239.230.56:9735\"\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "sendMessage",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation testMessage {\n    testMessage {\n        success\n    }\n}",
								"variables": "{}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "onchain.pay",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation onchain($address: String!, $amount: Int!, $memo: String) {\n    onchain {\n        pay(address: $address, amount: $amount, memo: $memo) {\n            success\n        }\n    }\n}",
								"variables": "{\n    \"address\": \"bcrt1q62dn33gg83hzckew7p2zlzkvtf2kg7rq7kmuew\",\n    \"amount\": 10000,\n    \"memo\": \"test\"\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/graphql",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cbe9c2a3-8b43-4021-bafc-813d735002ac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a94178ba-0051-4668-bd7a-7baa08ed4b0b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "eb604db2-49a2-4c0b-9b78-7adc76c5f1d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b405e411-7ef7-4649-9b1c-21c39e080538",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}