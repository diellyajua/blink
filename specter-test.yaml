NAME: bitcoind
LAST DEPLOYED: Thu Feb  4 20:23:15 2021
NAMESPACE: testnet
STATUS: deployed
REVISION: 287
USER-SUPPLIED VALUES:
bitcoindCustomConfig:
- debug=mempool
- debug=rpc
- testnet=1
- '[test]'
- bind=0.0.0.0
- rpcbind=0.0.0.0
- rpcallowip=0.0.0.0/0
bitcoindPVC:
  size: 50Gi
global:
  network: testnet
memory:
  limits: 1024Mi
  requests: 128Mi
specter:
  ingress:
    hosts:
    - host: specter.testnet.galoy.io
      paths:
      - /
    tls:
    - hosts:
      - specter.testnet.galoy.io
      secretName: specter-testnet-tls

COMPUTED VALUES:
bitcoindContainer:
  name: bitcoind-container
bitcoindCustomConfig:
- debug=mempool
- debug=rpc
- testnet=1
- '[test]'
- bind=0.0.0.0
- rpcbind=0.0.0.0
- rpcallowip=0.0.0.0/0
bitcoindGenericConfig:
- server=1
- txindex=1
- printtoconsole=1
- rpcuser=rpcuser
- rpcpassword=rpcpass
- zmqpubrawtx=tcp://0.0.0.0:28333
- zmqpubrawblock=tcp://0.0.0.0:28332
bitcoindImage:
  repository: ruimarinho/bitcoin-core
  tag: 0.20.1
bitcoindPVC:
  name: bitcoind-claim
  size: 50Gi
bitcoindTerminationGracePeriodSeconds: 30
global:
  network: testnet
memory:
  limits: 1024Mi
  requests: 128Mi
service:
  name: bitcoind-service
  type: ClusterIP
  zmqpubrawblock: 28332
  zmqpubrawtx: 28333
specter:
  enabled: true
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: ca-issuer
      kubernetes.io/ingress.class: nginx
    enabled: true
    hosts:
    - host: specter.testnet.galoy.io
      paths:
      - /
    tls:
    - hosts:
      - specter.testnet.galoy.io
      secretName: specter-testnet-tls

HOOKS:
---
# Source: bitcoind/charts/specter/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "bitcoind-specter-test-connection"
  labels:
    helm.sh/chart: specter-0.1.0
    app.kubernetes.io/name: specter
    app.kubernetes.io/instance: bitcoind
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['bitcoind-specter:25441']
  restartPolicy: Never
MANIFEST:
---
# Source: bitcoind/charts/specter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bitcoind-specter
  labels:
    helm.sh/chart: specter-0.1.0
    app.kubernetes.io/name: specter
    app.kubernetes.io/instance: bitcoind
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: bitcoind/templates/bitcoind-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bitcoind-configmap
  labels:
    app: bitcoind
    app.kubernetes.io/managed-by: Helm
data:
  bitcoin.conf: |-
    server=1
    txindex=1
    printtoconsole=1
    rpcuser=rpcuser
    rpcpassword=rpcpass
    zmqpubrawtx=tcp://0.0.0.0:28333
    zmqpubrawblock=tcp://0.0.0.0:28332
    debug=mempool
    debug=rpc
    testnet=1
    [test]
    bind=0.0.0.0
    rpcbind=0.0.0.0
    rpcallowip=0.0.0.0/0
---
# Source: bitcoind/charts/specter/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: specter-claim
  labels:
    "helm.sh/resource-policy": keep
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes: 
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "256Mi"
---
# Source: bitcoind/templates/bitcoind-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: bitcoind-claim
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
spec:
  accessModes: 
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "50Gi"
---
# Source: bitcoind/charts/specter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bitcoind-specter
  labels:
    helm.sh/chart: specter-0.1.0
    app.kubernetes.io/name: specter
    app.kubernetes.io/instance: bitcoind
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 25441
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: specter
    app.kubernetes.io/instance: bitcoind
---
# Source: bitcoind/templates/bitcoind-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: bitcoind-service
  labels:
    app: bitcoind-service
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: rpc
      port: 18332
      targetPort: 18332
    - name: p2p
      port: 18333
      targetPort: 18333
    - name: zmqpubrawtx
      port: 28333
    - name: zmqpubrawblock
      port: 28332
  selector:
    app: bitcoind-container
---
# Source: bitcoind/charts/specter/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet

metadata:
  name: bitcoind-specter
  labels:
    helm.sh/chart: specter-0.1.0
    app.kubernetes.io/name: specter
    app.kubernetes.io/instance: bitcoind
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: "specter"
  selector:
    matchLabels:
      app.kubernetes.io/name: specter
      app.kubernetes.io/instance: bitcoind
  template:
    metadata:
      labels:
        app.kubernetes.io/name: specter
        app.kubernetes.io/instance: bitcoind
    spec:
      serviceAccountName: bitcoind-specter
      securityContext:
        {}
      containers:
        - name: specter
          securityContext:
            {}
          image: "lncm/specter-desktop:v1.1.0"
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/python3", "-m", "cryptoadvance.specter", "server", "--host", "0.0.0.0"]
          ports:
            - name: http
              containerPort: 25441
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /about
              port: 25441
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
          volumeMounts:
            - name: specter-storage
              mountPath: /data/.specter
      volumes:
        - name: specter-storage
          persistentVolumeClaim:
            claimName: specter-claim
---
# Source: bitcoind/templates/bitcoind.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bitcoind-container
  labels:
    name: bitcoind-container
    app.kubernetes.io/managed-by: Helm
    kube-monkey/enabled: enabled
    kube-monkey/identifier: bitcoind-container
    kube-monkey/kill-mode: fixed
    kube-monkey/kill-value: "1"
    kube-monkey/mtbf: "5"
spec:
  replicas: 1
  serviceName: "bitcoind"
  selector:
    matchLabels:
      app: bitcoind-container
  template:
    metadata:
      labels:
        app: bitcoind-container
        kube-monkey/enabled: enabled
        kube-monkey/identifier: bitcoind-container
    spec:
      terminationGracePeriodSeconds: 
      initContainers:
        - name: copy-bitcoind-config
          image: busybox
          command: ['sh', '-c', 'cp /configmap/bitcoin.conf /home/bitcoin/.bitcoin/bitcoin.conf']
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: config
              mountPath: /home/bitcoin/.bitcoin/
      containers:
        - name: bitcoind-container
          image: "ruimarinho/bitcoin-core:0.20.1"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 3000m
              memory: 1024Mi
          ports:
            - name: rpc
              containerPort: 18332
            - name: p2p
              containerPort: 18333
            - name: zmqpubrawtx
              containerPort: 28333
            - name: zmqpubrawblock
              containerPort: 28332
          volumeMounts:
            - name: data
              mountPath: /home/bitcoin/.bitcoin
            - name: config
              mountPath: /home/bitcoin/.bitcoin/bitcoin.conf
              subPath: bitcoin.conf
          livenessProbe:
            exec:
              command:
              - bitcoin-cli
              - -conf=/home/bitcoin/.bitcoin/bitcoin.conf
              - -testnet
              - getblockchaininfo
            initialDelaySeconds: 120
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
              - bitcoin-cli
              - -conf=/home/bitcoin/.bitcoin/bitcoin.conf
              - -testnet
              - getblockchaininfo
            periodSeconds: 4
            successThreshold: 3
      volumes:
        - name: config
          emptyDir: {}
        - name: configmap
          configMap:
            name: bitcoind-configmap
        - name: data
          persistentVolumeClaim:
            claimName: bitcoind-claim
---
# Source: bitcoind/charts/specter/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: bitcoind-specter
  labels:
    helm.sh/chart: specter-0.1.0
    app.kubernetes.io/name: specter
    app.kubernetes.io/instance: bitcoind
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: ca-issuer
    kubernetes.io/ingress.class: nginx
spec:
  tls:
    - hosts:
        - "specter.testnet.galoy.io"
      secretName: specter-testnet-tls
  rules:
    - host: "specter.testnet.galoy.io"
      http:
        paths:
          - path: /
            backend:
              serviceName: bitcoind-specter
              servicePort: 25441

