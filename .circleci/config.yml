version: 2.1

orbs:
  gcp-gke: circleci/gcp-gke@1.1.0
  helm: circleci/helm@0.2.3
  gcp-gcr: circleci/gcp-gcr@0.7.1
  slack: circleci/slack@3.4.2


commands:
  gke-auth:
    steps:
      - run:
          name: Authenticate on gcloud
          command: |
            echo ${GCLOUD_SERVICE_KEY} > gcloud-service-key.json
            gcloud auth activate-service-account --key-file=gcloud-service-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud container clusters get-credentials testnet-cluster --region us-central1-a --project ${GOOGLE_PROJECT_ID}
  update-lnpage:
    parameters:
      namespace:
        type: string
    steps:
      - run:
          name: Update lnpage
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O jq
            chmod +x ./jq
            helm -n <<parameters.namespace>> upgrade -i --wait lnpage ./lnpage -f ./lnpage/<<parameters.namespace>>.yaml --set image.tag=$CIRCLE_SHA1
            kubectl -n << parameters.namespace >> wait --for=condition=ready pod -l app=lnpage
            LND_ADDR=$(kubectl -n <<parameters.namespace>> get services | awk '/lnd-service/ {print $4}')
            LND_PUB_KEY=$(kubectl -n <<parameters.namespace>> exec lnd-container-0 -- lncli -n <<parameters.namespace>> getinfo | ./jq -r '.identity_pubkey')
            GRAPHQL_URI=https://graphql.<<parameters.namespace>>.galoy.io/graphql
            echo "window.env={'LND_PUB_KEY':'$LND_PUB_KEY','LND_ADDR':'$LND_ADDR','GRAPHQL_URI':'$GRAPHQL_URI'}" > env.js
            kubectl -n <<parameters.namespace>> cp ./env.js $(kubectl -n <<parameters.namespace>> get pods -l app=lnpage --no-headers -o custom-columns=":metadata.name"):/usr/share/nginx/html/env.js

jobs:
  build_test_image:
    working_directory: ~/GaloyApp/backend/firebase/functions
    machine: true
    steps:
      - checkout:
          path: ~/GaloyApp
      - run:
          name: Write build params to docker image source
          command: |
            echo "COMMITHASH=$CIRCLE_SHA1" >> ./.env
            echo "BUILDTIME=$(date -u '+%F-%T')" >> ./.env
      - gcp-gcr/build-image:
          image: test-image
          tag: $CIRCLE_SHA1
      - gcp-gcr/gcr-auth
      - gcp-gcr/push-image:
          image: test-image
          tag: $CIRCLE_SHA1
          
  test:
    working_directory: ~/GaloyApp/backend
    docker:
      - image: kiwigrid/gcloud-kubectl-helm:latest
    resource_class: small
    steps:
      - checkout:
          path: ~/GaloyApp
      - run:
          name: generate and export namespace name
          command: |
            echo "export NAMESPACE=devnet-$CIRCLE_SHA1" >> $BASH_ENV
      - gke-auth
      - run:
          name: create namespace
          command: |
            kubectl create namespace $NAMESPACE
      - run:
          name: install helm charts
          command: |
            cd ~/GaloyApp/backend/firebase/functions/ && ./initLocalTest.sh 
      - run:
          name: Run jest test
          command: |
            kubectl exec --namespace=$NAMESPACE $(kubectl get pods --namespace=$NAMESPACE --selector=app=testpod --output=jsonpath={.items..metadata.name}) -- bash -c "yarn test --max_old_space_size=3000"
      - run:
          name: Run postman test
          command: |
            source $BASH_ENV
            kubectl exec --namespace=$NAMESPACE $(kubectl get pods --namespace=$NAMESPACE --selector=app=testpod --output=jsonpath={.items..metadata.name}) -- bash -c "yarn run postman"
      - run:
          name: sleep debug
          command: sleep 600
          when: always
      - run:
          name: Fetch test results
          command: |
            source $BASH_ENV
            kubectl cp --namespace=$NAMESPACE $(kubectl get pods --namespace=$NAMESPACE --selector=app=testpod --output=jsonpath={.items..metadata.name}):/functions/artifacts/junit.xml ./reports/junit.xml
          when: always
      # - run:
      #     name: sleep
      #     command: sleep 590 && echo "10 min" && sleep 590 && echo "20 min" && sleep 590 && echo "30 min"
      #     when: always
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports
      - run:
          name: Delete devnet namespace
          command: |
            kubectl delete namespaces $NAMESPACE
          when: always
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run: |
                gcloud container clusters get-credentials testnet-cluster --region us-central1-a --project ${GOOGLE_PROJECT_ID}
                cd ~/GaloyApp/backend/firebase/functions/ && ./initLocalTest.sh testnet            

  mainnet_deploy:
    working_directory: ~/GaloyApp/backend
    docker:
      - image: kiwigrid/gcloud-kubectl-helm:latest     
    resource_class: small
    steps:
      - checkout:
          path: ~/GaloyApp
      - gke-auth
      - run:
          name: Upgrade mainnet deployments
          command: |
            JOB_DATE=$(date -u '+%s')
            kubectl --namespace=mainnet create job --from=CronJob/mongo-backup-job "$JOB_DATE"
            kubectl --namespace=mainnet wait --for=condition=complete --timeout=60s job/$JOB_DATE
            kubectl --namespace=mainnet delete job/$JOB_DATE
            cd ~/GaloyApp/backend/firebase/functions/ && ./initLocalTest.sh mainnet
      
  update_lnpage:
    working_directory: ~/GaloyApp/infra
    docker:
      - image: kiwigrid/gcloud-kubectl-helm:latest
    resource_class: small
    steps:
      - checkout:
          path: ~/GaloyApp
      - gke-auth
      - update-lnpage:
          namespace: testnet
      - update-lnpage:
          namespace: mainnet


workflows:
  update_lnpage:
    jobs:
      - hold_update_lnpage:
          type: approval
          # filters:
          #   branches:
          #     only:
          #       - master
      - update_lnpage:
          requires:
            - hold_update_lnpage
  kube:
    jobs:
      - build_test_image
      - test:
          requires:
            - build_test_image
      - approve_mainnet_deploy:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - slack/approval-notification:
          mentions: 'U011J7RCEFQ,U011KKL1L4B'
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - mainnet_deploy:
          requires:
            - approve_mainnet_deploy
          filters:
            branches:
              only:
                - master